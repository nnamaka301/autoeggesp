task.wait(8)

local replicatedStorage = game:GetService("ReplicatedStorage")
local collectionService = game:GetService("CollectionService")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local teleportService = game:GetService("TeleportService")
local httpService = game:GetService("HttpService")

local localPlayer = players.LocalPlayer
local currentCamera = workspace.CurrentCamera

-- ‚úÖ List of desired pets
local desiredPetNames = {
    "Disco Bee",
    "Butterfly",
    "Shadow Moth"
}

-- üì® Webhook function
local function sendWebhook(petName)
    local url = "https://discord.com/api/webhooks/1154627247358103572/lSBBaPNADf8gP1-oIoHd7RGpmMDy11-CCj1R0ACM5gsMI_zEfGmLB_UAOGd2PxQ8vJnO"

    local data = {
        content = "@everyone üéâ YOU GOT A  **" .. petName .. "**! YOU GOT A FREAKING **" .. petName .. "**!"
    }

    local headers = {
        ["Content-Type"] = "application/json"
    }

    local body = httpService:JSONEncode(data)

    local request = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request)
    if request then
        pcall(function()
            request({
                Url = url,
                Method = "POST",
                Headers = headers,
                Body = body
            })
        end)
    else
        warn("‚ùå HTTP request function not available. Use a supported executor.")
    end
end

-- ü•ö Egg data extraction
local hatchFunction = getupvalue(getupvalue(getconnections(replicatedStorage.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local eggModels = getupvalue(hatchFunction, 1)
local eggPets = getupvalue(hatchFunction, 2)

local espCache = {}
local activeEggs = {}

local function getObjectFromId(objectId)
    for _, eggModel in ipairs(eggModels) do
        if eggModel:GetAttribute("OBJECT_UUID") == objectId then
            return eggModel
        end
    end
end

-- üü¶ ESP Management
local function UpdateEsp(objectId, petName)
    local object = getObjectFromId(objectId)
    if not object or not espCache[objectId] then return end

    local eggName = object:GetAttribute("EggName")
    espCache[objectId].Text = string.format("%s | %s", eggName, petName)
end

local function AddEsp(object)
    if object:GetAttribute("OWNER") ~= localPlayer.Name then return end

    local eggName = object:GetAttribute("EggName")
    local petName = eggPets[object:GetAttribute("OBJECT_UUID")]

    local objectId = object:GetAttribute("OBJECT_UUID")
    if not objectId then return end

    local label = Drawing.new("Text")
    label.Text = string.format("%s | %s", eggName, petName or "?")
    label.Size = 18
    label.Color = Color3.new(1, 1, 1)
    label.Outline = true
    label.OutlineColor = Color3.new(0, 0, 0)
    label.Center = true
    label.Visible = false

    espCache[objectId] = label
    activeEggs[objectId] = object
end

local function RemoveEsp(object)
    if object:GetAttribute("OWNER") ~= localPlayer.Name then return end

    local objectId = object:GetAttribute("OBJECT_UUID")
    if espCache[objectId] then
        espCache[objectId]:Remove()
        espCache[objectId] = nil
    end

    activeEggs[objectId] = nil
end

local function UpdateAllEsp()
    for objectId, object in pairs(activeEggs) do
        if not object or not object:IsDescendantOf(workspace) then
            activeEggs[objectId] = nil
            if espCache[objectId] then
                espCache[objectId].Visible = false
            end
            continue
        end

        local label = espCache[objectId]
        if label then
            local pos, onScreen = currentCamera:WorldToViewportPoint(object:GetPivot().Position)
            if onScreen then
                label.Position = Vector2.new(pos.X, pos.Y)
                label.Visible = true
            else
                label.Visible = false
            end
        end
    end
end

-- üîé Initial scan
for _, object in ipairs(collectionService:GetTagged("PetEggServer")) do
    task.spawn(AddEsp, object)
end

-- üîó Setup connections
local instanceAddedConnection = collectionService:GetInstanceAddedSignal("PetEggServer"):Connect(AddEsp)
local instanceRemovedConnection = collectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(RemoveEsp)
local renderConnection = runService.PreRender:Connect(UpdateAllEsp)

-- üîÅ Main detection loop
spawn(function()
    while true do
        local foundPets = {}

        for objectId, egg in pairs(activeEggs) do
            if egg and egg:IsDescendantOf(workspace) then
                task.wait(0.2)

                local eggName = egg:GetAttribute("EggName")
                local petName = eggPets[objectId]

                print("Checking egg:", eggName, "Pet:", petName)

                if eggName == "Premium Anti Bee Egg" and table.find(desiredPetNames, petName) then
                    table.insert(foundPets, petName)
                end
            end
        end

        if #foundPets > 0 then
            print("‚úÖ Desired pets found:", table.concat(foundPets, ", "))
            for _, pet in ipairs(foundPets) do
                sendWebhook(pet)
            end

            -- Cleanup and stop
            for _, label in pairs(espCache) do
                pcall(function() label:Remove() end)
            end
            espCache = {}
            activeEggs = {}

            instanceAddedConnection:Disconnect()
            instanceRemovedConnection:Disconnect()
            renderConnection:Disconnect()
            break
        else
            print("‚ùå No desired pets found. Rejoining...")

            -- Cleanup and rejoin
            for _, label in pairs(espCache) do
                pcall(function() label:Remove() end)
            end
            espCache = {}
            activeEggs = {}

            instanceAddedConnection:Disconnect()
            instanceRemovedConnection:Disconnect()
            renderConnection:Disconnect()

            task.wait(2)
            teleportService:Teleport(game.PlaceId, localPlayer)
            break
        end
    end
end)
